
local devkn = ".google/devkey.pem" -- Device key path and name
 -- Easy read/write: https://realtimelogic.com/ba/doc/?url=Mako.html#rwfile
local rw=require"rwfile"

 -- Create new X.509 ECC key if not found
if not io:stat(devkn) then
   trace("No ECC key. Creating",devkn)
   -- https://realtimelogic.com/ba/doc/?url=auxlua.html#ba_create_key
   rw.file(io,devkn,ba.create.key())
end

-- Device info is stored as JSON and created by regdev.lsp
-- Read if infoT=nil, write if infoT is set.
local function devinfo(infoT)
   return rw.json(io,".google/devinfo.json",infoT)
end

-- Returns the private ECC key
local function getkey() return rw.file(io,devkn) end

-- Create a JWT to authenticate this device. The device will be disconnected
-- after the token expires, and will have to reconnect with a new token. The
-- audience field should always be set to the GCP project id.
-- Details: https://cloud.google.com/iot/docs/how-tos/credentials/jwts
local function createJWT(projectId, time)
   local now=os.time()
   if not now then return nil, err end
   local token = {
      iat=now,
      exp=now+time,
      aud=projectId,
   };
   return require"jwt".scomp(getkey(), token);
end



-- Create a SharkSSL object and initialize with Google's root CA.
-- The root CA is used when validating the chain of trust in connect2broker()
local store = ba.create.certstore()
if not store:addcert(io, ".google/roots.pem") then
   error"Cannot load Google root CA"
end
local shark=ba.create.sharkssl(store)

-- Add your code for managing events sent from Google IoT core.
-- Function connectMQTT() subscribes to '/commands/#' and '/config'
local function mqttCallback(topic,msg)
   trace("mqttCallback",topic,msg)
end

local mqttErrCodes={
   [1]="unacceptable protocol version",
   [2]="identifier rejected",
   [3]="server unavailable",
   [4]="incorrect username or password",
   [5]="not authorized",
   -- Other error codes that can be returned.
   cn="MQTT broker certificate not trusted",
}
-- See: https://realtimelogic.com/ba/doc/?url=auxlua.html#socket_trusted
mqttErrCodes.cert=mqttErrCodes.cn


-- Create the required credentials, including the JWT token, connect
-- to the MQTT bridge, and check the TLS connection's chain of trust.
local function connect2broker(infoT)
   local mqttClientId = string.format(
       "projects/%s/locations/%s/registries/%s/devices/%s",
       infoT.projectId, infoT.region, infoT.registryId, infoT.deviceId)
   local mqtt,err = require"mqttc".connect(
      "mqtt.googleapis.com", mqttCallback, {
         shark = shark,
         port = 8883,
         keepalive = 5*60, -- 5 minutes
         id = mqttClientId,
         uname = "",
         passwd = createJWT(infoT.projectId,60*60*24)
      })
   if mqtt then return mqtt end
   return nil, (mqttErrCodes[err] or err), mqttErrCodes[err]
end


local mqttCon, mqttErr, reconnectMQTT

-- Connects to MQTT bridge in Cosocket mode
local function connectMQTT()
   local infoT = devinfo()
   if infoT then -- If configured
      local function mqttCosocket()
         local isMqttErr
         mqttCon,mqttErr,isMqttErr = connect2broker(infoT)
         trace("Connecting 2 Google's MQTT Bridge", mqttCon and "OK" or mqttErr)
         if mqttCon then
            -- Subscribe: https://cloud.google.com/iot/docs/how-tos/mqtt-bridge
            -- This is the topic that the device will receive configuration updates on.
            mqttCon:subscribe(string.format("/devices/%s/config",infoT.deviceId))
            -- The topic that the device will receive commands on.
            mqttCon:subscribe(string.format("/devices/%s/commands/#",infoT.deviceId))
            mqttCon:run()
            trace("MQTT Bridge closed:", mqttCon.error)
            -- if 'mqtt:disconnect() called -> "disconnect"' or "CTRL-C"
            if mqttCon.error == "disconnect" or mqttCon.error == "sysshutdown" then
               trace("Not restarting MQTT connection")
            else
               reconnectMQTT(10)
            end
         elseif isMqttErr then
            trace("Not restarting MQTT connection: MQTT err.")
         else
            reconnectMQTT(1000)
         end
      end
      -- Close existing connection, if any
      if mqttCon then
         mqttCon:disconnect()
      end
      ba.socket.event(mqttCosocket) -- Cosocket mode
   end
end

reconnectMQTT=function(sleep)
   ba.timer(connectMQTT):set(sleep,true)
end

connectMQTT() -- At startup


------ EXPORT (functions used by LSP pages)

app.getkey=getkey
app.devinfo=devinfo

function app.connect(infoT)
   if infoT then
      -- Perform a blocking connection test
      local mqtt,err = connect2broker(infoT)
      if mqtt then
         mqtt:disconnect()
         devinfo(infoT) -- Save device data
         connectMQTT() -- Permanent connection
         return true
      end
      return nil,err
   else
      return mqttCon,mqttErr
   end
end
